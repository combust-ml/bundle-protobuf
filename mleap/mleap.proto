syntax = "proto3";

package ml.combust.mleap.pb;

import "bundle.proto";

enum SelectMode {
  SELECT_MODE_UNKNOWN = 0;
  SELECT_MODE_STRICT = 1;
  SELECT_MODE_RELAXED = 2;
}

message TransformOptions {
  repeated string select = 1;
  SelectMode select_mode = 2;
}

enum Status {
  // request was successful
  STATUS_OK = 0;

  // There was an error handling the request
  STATUS_ERROR = 1;
}

message BundleMeta {
  ml.bundle.Bundle bundle = 1;
  ml.bundle.Schema input_schema = 2;
  ml.bundle.Schema output_schema = 3;
}

message GetBundleMetaRequest {
  string uri = 1;
}

message GetBundleMetaResponse {
  BundleMeta bundleMeta = 1;
  Status status = 3; // status (success/failure)
  string error = 4; // an error message for debugging
  string backtrace = 5; // a backtrace for debugging
}

message TransformFrameRequest {
  // Fields that are sent once on stream open
  //   (or everytime for one-off requests).
  string uri = 1;
  string format = 2;
  uint64 timeout = 3; // how long to wait for the transform to complete in ms

  // Fields that are sent after initialzing stream
  //  (or everytime for one-off requests)

  // key for associating requests with results
  // results can come out of order, so this is
  // needed to reconstruct ordering if necessary
  bytes tag = 4;
  bytes frame = 5; // leap frame in the specified format
  TransformOptions options = 6; // options for this transform
}

message TransformFrameResponse {
  bytes tag = 1; // tag sent in with request
  bytes frame = 2; // leap frame in the request format
  Status status = 3; // status of the transform (success/failure)
  string error = 4; // an error message for debugging
  string backtrace = 5; // a backtrace for debugging
}

message TransformRowRequest {
  // Fields that are sent once on stream open
  //   these configure subsequent calls to the
  //   stream, and are ignored after the first call
  string uri = 1;
  string format = 2;
  ml.bundle.Schema schema = 3;
  TransformOptions options = 4;
  uint32 parallelism = 5;
  uint64 timeout = 6; // timeout in milliseconds to get a result

  // Fields that are sent after initializing stream

  bytes tag = 7; // tag to associate with result
  bytes row = 8; // data to transform
}

message TransformRowResponse {
  bytes tag = 1; // tag sent in with request
  bytes row = 2; // row data in the stream format
  Status status = 3; // status of this transform request (success/failure)
  string error = 4; // error message for debugging
  string backtrace = 5; // error backtrace for debugging
}

