syntax = "proto3";

package ml.combust.mleap.pb;

import "bundle.proto";

enum SelectMode {
  SELECT_MODE_UNKNOWN = 0;
  SELECT_MODE_STRICT = 1;
  SELECT_MODE_RELAXED = 2;
}

message TransformOptions {
  repeated string select = 1;
  SelectMode select_mode = 2;
}

enum TransformStatus {
  // Transform was successful
  STATUS_OK = 0;

  // There was an error during the transform
  STATUS_ERROR = 1;
}

message BundleMeta {
  ml.bundle.Bundle bundle = 1;
  ml.bundle.Schema input_schema = 2;
  ml.bundle.Schema output_schema = 3;
}

message StreamConfig {
  uint64 init_timeout = 1;
  uint64 idle_timeout = 2;
  uint64 transform_timeout = 3;
  uint32 parallelism = 4;
  uint32 buffer_size = 5;
}

message GetBundleMetaRequest {
  string uri = 1;
}

message ModelConfig {
  // URI of configured model
  string uri = 1;

  // How long to wait after all connections close
  //  and no more transform request before unloading
  //  model from memory
  uint64 memory_timeout = 2;

  // How long to wait from when model is first loaded
  //  from disk to memory before invalidating any
  //  cached files
  uint64 disk_timeout = 3;
}

message TransformFrameRequest {
  // Fields that are sent once on stream open
  //   (or everytime for one-off requests).
  string uri = 1;
  string format = 2;

  // Stream Only Fields
  StreamConfig stream_config = 3;

  // Fields that are sent after initialzing stream
  //  (or everytime for one-off requests)

  // key for associating requests with results
  // results can come out of order, so this is
  // needed to reconstruct ordering if necessary
  bytes tag = 10;
  bytes frame = 11; // leap frame in the specified format
  TransformOptions options = 12; // options for this transform
}

message TransformFrameResponse {
  bytes tag = 1; // tag sent in with request
  bytes frame = 2; // leap frame in the request format
  TransformStatus status = 3; // status of the transform (success/failure)
  string error = 4; // an error message for debugging
  string backtrace = 5; // a backtrace for debugging
}

message TransformRowRequest {
  // Fields that are sent once on stream open
  //   these configure subsequent calls to the
  //   stream, and are ignored after the first call
  string uri = 1;
  string format = 2;
  ml.bundle.Schema schema = 3;
  TransformOptions options = 4;
  StreamConfig stream_config = 5;

  // Fields that are sent after initializing stream

  bytes tag = 10; // tag to associate with result
  bytes row = 11; // data to transform
}

message TransformRowResponse {
  // Fields that are sent once on stream open
  //   these configure subsequent calls to the
  //   stream, and are ignored after the first call
  ml.bundle.Schema schema = 1; // Schema of output rows

  // Fields that are sent after initializing stream

  bytes tag = 10; // tag sent in with request
  bytes row = 11; // row data in the stream format
  TransformStatus status = 12; // status of this transform request (success/failure)
  string error = 13; // error message for debugging
  string backtrace = 14; // error backtrace for debugging
}

